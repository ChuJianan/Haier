package com.haier.activity;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.ImageView;
import android.widget.TextView;

import com.haier.R;
import com.haier.activity.fragment.CarefulFragment;
import com.haier.activity.fragment.EquipmentFragment;
import com.haier.activity.fragment.GameListFragment;
import com.haier.activity.fragment.NoteFragment;
import com.haier.activity.fragment.SetFragment;
import com.haier.activity.fragment.Game1Activity;
import com.haier.bean.Music1;
import com.haier.bean.User;
import com.haier.utils.JsonUtils;
public class  GameListActivity extends FragmentActivity implements OnClickListener{
	/**
	 * 用于展示装备的Fragment
	 */
	private EquipmentFragment messageFragment;
	private TextView usernameTextView;
	private TextView corenumber;
	/**
	 * 用于展示动态的Fragment
	 */
	private SetFragment newsFragment;
	/**
	 * 用于展示设置的Fragment
	 */
	
	private CarefulFragment settingFragment;
	/**
	 * 用于展示选择游戏的界面
	 */
	private GameListFragment selectgameFragment;
	/**
	 * 用于发表学习笔记的界面
	 */
	private NoteFragment noteFragment;
	
	/**
	 * 消息界面布局
	 */
	private View messageLayout;

	/**
	 * 联系人界面布局
	 */
	private View contactsLayout;
	/**
	 * 动态界面布局
	 */
	private View newsLayout;

	/**
	 * 设置界面布局
	 */
	private View settingLayout;
	
	/**
	 * 选择游戏界面布局
	 */
	private View selectLayout;
	/**
	 * 学习笔记界面布局
	 */
	private View noteLayout;
	/**
	 * 装备界面布局
	 */
	private View scoreLayout;
	
	/**
	 * 在Tab布局上显示消息图标的控件
	 */
	private ImageView back;

	/**
	 * 在Tab布局上显示联系人图标的控件
	 */
	private ImageView contactsImage;

	/**
	 * 在Tab布局上显示动态图标的控件
	 */
	private ImageView newsImage;
	
	
	private ImageView selectImageView;

	/**
	 * 在Tab布局上显示设置图标的控件
	 */
	private ImageView settingImage;
	/**
	 * 在Tab布局上显示消息标题的控件
	 */
	//private TextView messageText;
	/**
	 * 在Tab布局上显示联系人标题的控件
	 */
	//private TextView contactsText;
	/**
	 * 在Tab布局上显示动态标题的控件
	 */
	//private TextView newsText;

	/**
	 * 在Tab布局上显示设置标题的控件
	 */
	//private TextView settingText;
	private TextView text;
	/**
	 * 用于对Fragment进行管理
	 */
	private FragmentManager fragmentManager;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.weikasa);
		// 初始化布局元素
		initViews();
		fragmentManager = getSupportFragmentManager();
		// 第一次启动时选中第0个tab
		setTabSelection(0);
	}
	/**
	 * 在这里获取到每个需要用到的控件的实例，并给它们设置好必要的点击事件。
	 */
	private void initViews() {
		messageLayout = findViewById(R.id.message_layout);
		//contactsLayout = findViewById(R.id.contacts_layout);
		newsLayout = findViewById(R.id.news_layout);
		settingLayout = findViewById(R.id.setting_layout);
		back = (ImageView) findViewById(R.id.back);
		
		
		text= (TextView)findViewById(R.id.text);
		text.setText(Music1.getRESULTS());
		usernameTextView=(TextView)findViewById(R.id.user);
		corenumber=(TextView)findViewById(R.id.corenumber);
		corenumber.setText(User.getUserscore());
		usernameTextView.setText(User.getUserName());
		
		//contactsImage = (ImageView) findViewById(R.id.contacts_image);
		
		//scoreLayout= findViewById(R.id.jifen);
		noteLayout= findViewById(R.id.notelayout);
		selectLayout= findViewById(R.id.selectlayout);
		selectImageView= (ImageView) findViewById(R.id.imageselect);
		newsImage = (ImageView) findViewById(R.id.news_image);
		settingImage = (ImageView) findViewById(R.id.setting_image);
		/*messageText = (TextView) findViewById(R.id.message_text);
		contactsText = (TextView) findViewById(R.id.contacts_text);
		newsText = (TextView) findViewById(R.id.news_text);
		settingText = (TextView) findViewById(R.id.setting_text);*/
		messageLayout.setOnClickListener(this);
		//contactsLayout.setOnClickListener(this);
		newsLayout.setOnClickListener(this);
		settingLayout.setOnClickListener(this);
		selectLayout.setOnClickListener(this);
		noteLayout.setOnClickListener(this);
		//scoreLayout.setOnClickListener(this);
		back.setOnClickListener(this);
	}
	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.back:
			// 当点击了选择tab时，选中第1个tab
			if(JsonUtils.na.equals("1")){
				Intent intent=new Intent(GameListActivity.this,KnowledgeXiaoActivity.class);
				startActivity(intent);
				finish();
			}else if (JsonUtils.na.equals("2")) {
				Intent intent=new Intent(GameListActivity.this,KnowledgeSeaActivity.class);
				startActivity(intent);
				finish();
			}
			break;
		case R.id.selectlayout:
			// 当点击了选择tab时，选中第1个tab
			setTabSelection(0);
			break;
		case R.id.notelayout:
			// 当点击了选择tab时，选中第1个tab
			setTabSelection(1);
			break;
		/*case R.id.jifen:
			// 当点击了选择tab时，选中第1个tab
			setTabSelection(2);
			break;*/
		case R.id.message_layout:
			// 当点击了消息tab时，选中第1个tab
			setTabSelection(2);
			break;
		/*case R.id.contacts_layout:
			// 当点击了联系人tab时，选中第2个tab
			setTabSelection(4);
			break;*/
		case R.id.news_layout:
			// 当点击了动态tab时，选中第3个tab
			setTabSelection(3);
			break;
		case R.id.setting_layout:
			// 当点击了设置tab时，选中第4个tab
			setTabSelection(4);
			break;
		
		default:
			break;
		}
	}
	/**
	 * 根据传入的index参数来设置选中的tab页。
	 * 
	 * @param index
	 *            每个tab页对应的下标。0表示消息，1表示联系人，2表示动态，3表示设置。
	 */
	private void setTabSelection(int index) {
		// 每次选中之前先清楚掉上次的选中状态
		clearSelection();
		// 开启一个Fragment事务
		FragmentTransaction transaction = fragmentManager.beginTransaction();
		// 先隐藏掉所有的Fragment，以防止有多个Fragment显示在界面上的情况
		hideFragments(transaction);
		switch (index) {
		case 0:
			if (selectgameFragment == null) {
				// 如果NewsFragment为空，则创建一个并添加到界面上
				selectgameFragment = new GameListFragment();
				transaction.add(R.id.content, selectgameFragment);
			} else {
				// 如果NewsFragment不为空，则直接将它显示出来
				transaction.show(selectgameFragment);
			}
			break;
		case 1:
			if (noteFragment == null) {
				// 如果NewsFragment为空，则创建一个并添加到界面上
				noteFragment = new NoteFragment();
				transaction.add(R.id.content, noteFragment);
			} else {
				// 如果NewsFragment不为空，则直接将它显示出来
				transaction.show(noteFragment);
			}
			break;
		/*case 2:
			if (scoreFragment == null) {
				// 如果NewsFragment为空，则创建一个并添加到界面上
				scoreFragment = new RankingFragment();
				transaction.add(R.id.content, scoreFragment);
			} else {
				// 如果NewsFragment不为空，则直接将它显示出来
				transaction.show(scoreFragment);
			}
			break;*/
		case 2:
			// 当点击了消息tab时，改变控件的图片和文字颜色
			//messageImage.setImageResource(R.drawable.message_selected);
			//messageText.setTextColor(Color.WHITE);
			if (messageFragment == null) {
				// 如果MessageFragment为空，则创建一个并添加到界面上
				messageFragment = new EquipmentFragment();
				transaction.add(R.id.content, messageFragment);
			} else {
				// 如果MessageFragment不为空，则直接将它显示出来
				transaction.show(messageFragment);
			}
			break;
		/*case 4:
			// 当点击了联系人tab时，改变控件的图片和文字颜色
			//contactsImage.setImageResource(R.drawable.contacts_selected);
			//contactsText.setTextColor(Color.WHITE);
			if (contactsFragment == null) {
				// 如果ContactsFragment为空，则创建一个并添加到界面上
				contactsFragment = new FriendFragment();
				transaction.add(R.id.content, contactsFragment);
			} else {
				// 如果ContactsFragment不为空，则直接将它显示出来
				transaction.show(contactsFragment);
			}
			break;*/
		case 3:
			// 当点击了动态tab时，改变控件的图片和文字颜色
			//newsImage.setImageResource(R.drawable.news_selected);
			//newsText.setTextColor(Color.WHITE);
			if (newsFragment == null) {
				// 如果NewsFragment为空，则创建一个并添加到界面上
				newsFragment = new SetFragment();
				transaction.add(R.id.content, newsFragment);
			} else {
				// 如果NewsFragment不为空，则直接将它显示出来
				transaction.show(newsFragment);
			}
			break;
		case 4:
		default:
			// 当点击了设置tab时，改变控件的图片和文字颜色
			//settingImage.setImageResource(R.drawable.setting_selected);
			//settingText.setTextColor(Color.WHITE);
			if (settingFragment == null) {
				// 如果SettingFragment为空，则创建一个并添加到界面上
				settingFragment = new CarefulFragment();
				transaction.add(R.id.content, settingFragment);
			} else {
				// 如果SettingFragment不为空，则直接将它显示出来
				transaction.show(settingFragment);
			}
			break;
		}
		transaction.commit();
	}
	/**
	 * 清除掉所有的选中状态。
	 */
	private void clearSelection() {
		//messageImage.setImageResource(R.drawable.message_unselected);
		//messageText.setTextColor(Color.parseColor("#82858b"));
		//contactsImage.setImageResource(R.drawable.contacts_unselected);
		//contactsText.setTextColor(Color.parseColor("#82858b"));
		//newsImage.setImageResource(R.drawable.news_unselected);
		//newsText.setTextColor(Color.parseColor("#82858b"));
		//settingImage.setImageResource(R.drawable.setting_unselected);
		//settingText.setTextColor(Color.parseColor("#82858b"));
	}

	/**
	 * 将所有的Fragment都置为隐藏状态。
	 * 
	 * @param transaction
	 *            用于对Fragment执行操作的事务
	 */
	private void hideFragments(FragmentTransaction transaction) {
		if (selectgameFragment != null) {
			transaction.hide(selectgameFragment);
		}
		if (noteFragment != null) {
			transaction.hide(noteFragment);
		}
		/*if (scoreFragment != null) {
			transaction.hide(scoreFragment);
		}*/
		if (messageFragment != null) {
			transaction.hide(messageFragment);
		}
		/*if (contactsFragment != null) {
			transaction.hide(contactsFragment);
		}*/
		if (newsFragment != null) {
			transaction.hide(newsFragment);
		}
		if (settingFragment != null) {
			transaction.hide(settingFragment);
		}
		
	}
}
